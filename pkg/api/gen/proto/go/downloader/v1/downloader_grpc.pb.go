// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: downloader/v1/downloader.proto

package downloaderv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DownloaderServiceClient is the client API for DownloaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloaderServiceClient interface {
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (DownloaderService_GetImageClient, error)
}

type downloaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloaderServiceClient(cc grpc.ClientConnInterface) DownloaderServiceClient {
	return &downloaderServiceClient{cc}
}

func (c *downloaderServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, "/downloader.v1.DownloaderService/DownloadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloaderServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (DownloaderService_GetImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &DownloaderService_ServiceDesc.Streams[0], "/downloader.v1.DownloaderService/GetImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &downloaderServiceGetImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DownloaderService_GetImageClient interface {
	Recv() (*GetImageResponse, error)
	grpc.ClientStream
}

type downloaderServiceGetImageClient struct {
	grpc.ClientStream
}

func (x *downloaderServiceGetImageClient) Recv() (*GetImageResponse, error) {
	m := new(GetImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DownloaderServiceServer is the server API for DownloaderService service.
// All implementations must embed UnimplementedDownloaderServiceServer
// for forward compatibility
type DownloaderServiceServer interface {
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	GetImage(*GetImageRequest, DownloaderService_GetImageServer) error
	mustEmbedUnimplementedDownloaderServiceServer()
}

// UnimplementedDownloaderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDownloaderServiceServer struct {
}

func (UnimplementedDownloaderServiceServer) DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedDownloaderServiceServer) GetImage(*GetImageRequest, DownloaderService_GetImageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedDownloaderServiceServer) mustEmbedUnimplementedDownloaderServiceServer() {}

// UnsafeDownloaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloaderServiceServer will
// result in compilation errors.
type UnsafeDownloaderServiceServer interface {
	mustEmbedUnimplementedDownloaderServiceServer()
}

func RegisterDownloaderServiceServer(s grpc.ServiceRegistrar, srv DownloaderServiceServer) {
	s.RegisterService(&DownloaderService_ServiceDesc, srv)
}

func _DownloaderService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloaderServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/downloader.v1.DownloaderService/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloaderServiceServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloaderService_GetImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownloaderServiceServer).GetImage(m, &downloaderServiceGetImageServer{stream})
}

type DownloaderService_GetImageServer interface {
	Send(*GetImageResponse) error
	grpc.ServerStream
}

type downloaderServiceGetImageServer struct {
	grpc.ServerStream
}

func (x *downloaderServiceGetImageServer) Send(m *GetImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DownloaderService_ServiceDesc is the grpc.ServiceDesc for DownloaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "downloader.v1.DownloaderService",
	HandlerType: (*DownloaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadImage",
			Handler:    _DownloaderService_DownloadImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetImage",
			Handler:       _DownloaderService_GetImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "downloader/v1/downloader.proto",
}
