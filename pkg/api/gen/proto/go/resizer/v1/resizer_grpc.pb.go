// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: resizer/v1/resizer.proto

package resizerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResizerServiceClient is the client API for ResizerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResizerServiceClient interface {
	ResizeImage(ctx context.Context, in *ResizeImageRequest, opts ...grpc.CallOption) (*ResizeImageResponse, error)
}

type resizerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResizerServiceClient(cc grpc.ClientConnInterface) ResizerServiceClient {
	return &resizerServiceClient{cc}
}

func (c *resizerServiceClient) ResizeImage(ctx context.Context, in *ResizeImageRequest, opts ...grpc.CallOption) (*ResizeImageResponse, error) {
	out := new(ResizeImageResponse)
	err := c.cc.Invoke(ctx, "/resizer.v1.ResizerService/ResizeImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResizerServiceServer is the server API for ResizerService service.
// All implementations must embed UnimplementedResizerServiceServer
// for forward compatibility
type ResizerServiceServer interface {
	ResizeImage(context.Context, *ResizeImageRequest) (*ResizeImageResponse, error)
	mustEmbedUnimplementedResizerServiceServer()
}

// UnimplementedResizerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResizerServiceServer struct {
}

func (UnimplementedResizerServiceServer) ResizeImage(context.Context, *ResizeImageRequest) (*ResizeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeImage not implemented")
}
func (UnimplementedResizerServiceServer) mustEmbedUnimplementedResizerServiceServer() {}

// UnsafeResizerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResizerServiceServer will
// result in compilation errors.
type UnsafeResizerServiceServer interface {
	mustEmbedUnimplementedResizerServiceServer()
}

func RegisterResizerServiceServer(s grpc.ServiceRegistrar, srv ResizerServiceServer) {
	s.RegisterService(&ResizerService_ServiceDesc, srv)
}

func _ResizerService_ResizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResizerServiceServer).ResizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resizer.v1.ResizerService/ResizeImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResizerServiceServer).ResizeImage(ctx, req.(*ResizeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResizerService_ServiceDesc is the grpc.ServiceDesc for ResizerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResizerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resizer.v1.ResizerService",
	HandlerType: (*ResizerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResizeImage",
			Handler:    _ResizerService_ResizeImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resizer/v1/resizer.proto",
}
